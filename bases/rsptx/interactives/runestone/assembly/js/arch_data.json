{
    "MAX_NUM" : 63,
    "BIT_ODDS_X86_64" : [0.25, 0.75],
    "MSG_OK" : "This message is valid!",
    "MSG_BAD_DEST" : "Check if destination operand type is allowed.",
    "MSG_BAD_SRC" : "Check if source operand(s) type combination is allowed.",
    "MSG_CT" : "Check if instruction has too many or too few operands.",
    "ARM64": {
        "bad_dest" : [0.40, 0.60],
        "memOps": {
            "mainWeight": 15,
            "instructions": ["mov", "mvn"],
            "errorsOdds" : [40, 25, 25, 10],
            "errors" : {
                "ok": "r-(l/r)",
                "bad_dest" : "(l/m)-(l/m)",
                "bad_src" : "r-m",
                "bad_ct" : "r-r-r"
            }
        },
        "archOps": {
            "mainWeight": 15,
            "instructions": ["ldr", "str"],
            "errorsOdds" : [40, 25, 25, 10],
            "errors" : {
                "ok": "r-m",
                "bad_dest" : "m-m",
                "bad_src" : "r-l",
                "bad_ct" : "r-r-r"
            }
        },
        "arithUnary": {
            "mainWeight": 20,
            "instructions": ["neg"],
            "errorsOdds" : [40, 25, 20, 15],
            "errors" : {
                "ok": "r-(r/l)",
                "bad_dest" : "m-(r/l)",
                "bad_src" : "r-m",
                "bad_ct" : "r-(r/l)-(r/l)"
            }
        },
        "arithBinary": {
            "mainWeight": 25,
            "instructions": ["add", "sub", "mul", "udiv", "sdiv"],
            "errorsOdds" : [30, 20, 20, 20],
            "errors" : {
                "ok": "r-(r/l)-(r/l)",
                "bad_dest" : "m-(r/l)-(r/l)",
                "bad_src" : "r-(ml/mr/lm/rm/mm)",
                "bad_ct" : "r-(r/l)"
            }
        },
        "bitLogic": {
            "mainWeight": 15,
            "instructions": ["and", "orr", "eor"],
            "errorsOdds" : [30, 20, 20, 20],
            "errors" : {
                "ok": "r-(r/l)-(r/l)",
                "bad_dest" : "m-(r/l)-(r/l)",
                "bad_src" : "r-(ml/mr/lm/rm/mm)",
                "bad_ct" : "r-(r/l)"
            }
        },
        "bitShift": {
            "mainWeight": 15,
            "instructions": ["lsl", "lsr", "asr"],
            "errorsOdds" : [30, 20, 20, 20],
            "errors" : {
                "ok": "r-(r/l)-(r/l)",
                "bad_dest" : "m-(r/l)-(r/l)",
                "bad_src" : "r-(ml/mr/lm/rm/mm)",
                "bad_ct" : "r-(r/l)"
            }
        },
        "offsets": ["#8", "#16", "#32"],
        "registers_32": [],
        "registers_64": []
    },
    "X86_32": {
        "memOps" : {
            "mainWeight" : 15,
            "instructions": ["mov"],
            "errorsOdds" : [40, 20, 20, 20],
            "errors" : {
                "ok": "mr/lr/rr/rm/lm",
                "bad_dest" : "a-l",
                "bad_src" : "mm",
                "bad_ct" : "a"
            }
        },
        "archOps" : {
            "mainWeight" : 15,
            "instructions": ["push", "pop"],
            "errorsOdds" : [40, 20, 20, 20],
            "errors" : {
                "ok": "r",
                "bad_dest" : "m/l",
                "bad_src" : "m/l",
                "bad_ct" : "a-a"
            }
        },
        "arithUnary" : {
            "mainWeight" : 20,
            "instructions": ["neg", "not"],
            "errorsOdds" : [40, 20, 20, 20],
            "errors" : {
                "ok": "mr/lr/rr/rm/lm",
                "bad_dest" : "a-l",
                "bad_src" : "mm",
                "bad_ct" : "a-a-r"
            }
        },
        "arithBinary" : {
            "mainWeight" : 30,
            "instructions": ["add", "sub"],
            "errorsOdds" : [40, 20, 20, 20],
            "errors" : {
                "ok": "mr/lr/rr/rm/lm",
                "bad_dest" : "a-l",
                "bad_src" : "mm",
                "bad_ct" : "a-a-r"
            }
        },
        "bitLogic": {
            "mainWeight": 15,
            "instructions": ["and", "or", "xor"],
            "errorsOdds" : [40, 20, 20, 20],
            "errors" : {
                "ok": "mr/lr/rr/rm/lm",
                "bad_dest" : "a-l",
                "bad_src" : "mm",
                "bad_ct" : "a-a-r"
            }
        },
        "bitShift" : {
            "mainWeight" : 20,
            "instructions": ["shl", "shr", "sar"],
            "errorsOdds" : [40, 20, 20, 20],
            "errors" : {
                "ok": "mr/lr/rr/rm/lm",
                "bad_dest" : "a-l",
                "bad_src" : "mm",
                "bad_ct" : "a-a-r"
            }
        },
        "offsets": ["8", "16", "32"],
        "registers_32": ["eax", "ebx", "ecx", "edx", "esi", "edi", "ebp", "esp"],
        "registers_64": []
    },
    "X86_64": {
        "doubleMem_litDest": [0.60, 0.40],
        "bad_dest" : [0.40, 0.60],
        "memOps" : {
            "mainWeight" : 15,
            "instructions": ["mov"],
            "errorsOdds" : [40, 20, 20, 20],
            "errors" : {
                "ok": "mr/lr/rr/rm/lm",
                "bad_dest" : "a-l",
                "bad_src" : "mm",
                "bad_ct" : "a-a-r"
            }
        },
        "archOps" : {
            "mainWeight" : 15,
            "instructions": ["push", "pop"],
            "errorsOdds" : [40, 20, 20, 20],
            "errors" : {
                "ok": "r",
                "bad_dest" : "m/l",
                "bad_src" : "m/l",
                "bad_ct" : "a-a"
            }
        },
        "arithUnary" : {
            "mainWeight" : 20,
            "instructions": ["neg", "not"],
            "errorsOdds" : [40, 20, 20, 20],
            "errors" : {
                "ok": "mr/lr/rr/rm/lm",
                "bad_dest" : "a-l",
                "bad_src" : "mm",
                "bad_ct" : "a-a-r"
            }
        },
        "arithBinary" : {
            "mainWeight" : 30,
            "instructions": ["add", "sub"],
            "errorsOdds" : [40, 20, 20, 20],
            "errors" : {
                "ok": "mr/lr/rr/rm/lm",
                "bad_dest" : "a-l",
                "bad_src" : "mm",
                "bad_ct" : "a-a-r"
            }
        },
        "bitLogic": {
            "mainWeight": 15,
            "instructions": ["and", "or", "xor"],
            "errorsOdds" : [40, 20, 20, 20],
            "errors" : {
                "ok": "mr/lr/rr/rm/lm",
                "bad_dest" : "a-l",
                "bad_src" : "mm",
                "bad_ct" : "a-a-r"
            }
        },
        "bitShift" : {
            "mainWeight" : 20,
            "instructions": ["shl", "shr", "sar"],
            "errorsOdds" : [40, 20, 20, 20],
            "errors" : {
                "ok": "mr/lr/rr/rm/lm",
                "bad_dest" : "a-l",
                "bad_src" : "mm",
                "bad_ct" : "a-a-r"
            }
        },
        "offsets": ["", "0x8", "0x16", "0x32"],
        "registers_32": ["eax", "ebx", "ecx", "edx", "esi", "edi"],
        "registers_64": ["rax", "rbx", "rcx", "rdx", "rsi", "rdi", "rbp", "rsp",
                        "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15"]
    }
}
